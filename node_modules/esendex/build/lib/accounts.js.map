{"version":3,"sources":["lib/accounts.ts"],"names":["Accounts","Accounts.constructor","Accounts.get"],"mappings":"AACA,0BAAwB,aACxB,CAAC,CADoC;AACrC,qBAA8B,MAE9B,CAAC,CAFmC;AAcpC;IAIEA,kBAAYA,MAAcA;QACxBC,IAAIA,CAACA,MAAMA,GAAGA,MAAMA,CAACA;QACrBA,IAAIA,CAACA,MAAMA,GAAGA,IAAIA,qBAASA,EAAEA,CAACA;IAChCA,CAACA;IAEDD,sBAAGA,GAAHA,UAAIA,OAA2BA,EAAEA,QAA2EA;QAA5GE,iBAwBCA;QAvBCA,IAAIA,IAAIA,GAAGA,gBAAgBA,CAACA;QAE5BA,IAAIA,SAASA,GAAGA,OAAOA,IAAIA,OAAOA,CAACA,EAAEA,IAAIA,IAAIA,CAACA;QAC9CA,EAAEA,CAACA,CAACA,SAASA,CAACA,CAACA,CAACA;YACdA,IAAIA,GAAGA,aAAMA,CAACA,OAAOA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,CAACA;YACxCA,OAAOA,OAAOA,CAACA,EAAEA,CAACA;QACpBA,CAACA;QAEDA,IAAIA,CAACA,MAAMA,CAACA,cAAcA,CAACA,OAAOA,CAACA,KAAKA,EAAEA,IAAIA,EAAEA,OAAOA,EAAEA,IAAIA,EAAEA,GAAGA,EAAEA,UAACA,GAAGA,EAAEA,QAAQA;YAChFA,EAAEA,CAACA,CAACA,GAAGA,CAACA;gBAACA,MAAMA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA;YAE9BA,KAAIA,CAACA,MAAMA,CAACA,WAAWA,CAACA,QAAQA,EAAEA,UAAUA,GAAGA,EAAEA,MAAMA;gBACrD,EAAE,CAAC,CAAC,GAAG,CAAC;oBAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAC9B,EAAE,CAAC,CAAC,SAAS,CAAC;oBAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;gBAErD,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;gBAE/B,EAAE,CAAC,CAAC,CAAC,cAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;oBAC7B,QAAQ,CAAC,OAAO,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBAExC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAC3B,CAAC,CAACA,CAACA;QACLA,CAACA,CAACA,CAACA;IACLA,CAACA;IACHF,eAACA;AAADA,CAlCA,AAkCCA,IAAA;AAlCY,gBAAQ,WAkCpB,CAAA","file":"lib/accounts.js","sourcesContent":["import {Client} from './client'\r\nimport {XmlParser} from './xmlparser'\r\nimport {isArray, format} from 'util'\r\n\r\nexport declare interface AccountsGetOptions {\r\n  id?: string\r\n}\r\n\r\nexport declare interface AccountResponse {\r\n\r\n}\r\n\r\nexport declare interface AccountsResponse {\r\n\r\n}\r\n\r\nexport class Accounts {\r\n  private client: Client;\r\n  private parser: XmlParser;\r\n  \r\n  constructor(client: Client) {\r\n    this.client = client;\r\n    this.parser = new XmlParser();\r\n  }\r\n\r\n  get(options: AccountsGetOptions, callback: (err: any, response?: AccountResponse | AccountsResponse) => void) {\r\n    let path = '/v1.0/accounts';\r\n  \r\n    let accountId = options && options.id || null;\r\n    if (accountId) {\r\n      path = format('%s/%s', path, accountId);\r\n      delete options.id;\r\n    }\r\n  \r\n    this.client.requesthandler.request('GET', path, options, null, 200, (err, response) => {\r\n      if (err) return callback(err);\r\n  \r\n      this.parser.parseString(response, function (err, result) {\r\n        if (err) return callback(err);\r\n        if (accountId) return callback(null, result.account);\r\n        \r\n        let accounts = result.accounts;\r\n  \r\n        if (!isArray(accounts.account))\r\n          accounts.account = [accounts.account];\r\n  \r\n        callback(null, accounts);\r\n      });\r\n    });\r\n  }\r\n}"],"sourceRoot":"../../src"}