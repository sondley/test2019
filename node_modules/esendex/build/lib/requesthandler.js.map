{"version":3,"sources":["lib/requesthandler.ts"],"names":["onSocketTimeout","RequestHandler","RequestHandler.constructor","RequestHandler.request"],"mappings":"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","file":"lib/requesthandler.js","sourcesContent":["import * as http from 'http'\r\nimport * as https from 'https'\r\nimport * as querystring from 'querystring'\r\nimport {ResponseHandler} from './responsehandler'\r\nimport {UserAgentBuilder} from './useragentbuilder'\r\n\r\nexport declare interface RequestHandlerOptions {\r\n  host?: string\r\n  port?: number\r\n  https?: boolean\r\n  timeout?: number\r\n  username?: string\r\n  password?: string\r\n}\r\n\r\nlet defaultOptions : RequestHandlerOptions = {\r\n  host: 'api.esendex.com',\r\n  port: 443,\r\n  https: true,\r\n  timeout: 30000\r\n};\r\n\r\nfunction onSocketTimeout() {\r\n  this._req.abort();\r\n}\r\n\r\nexport class RequestHandler {\r\n  public options: RequestHandlerOptions;\r\n  private responseHandler: ResponseHandler;\r\n  private userAgent: string;\r\n  \r\n  constructor(options: RequestHandlerOptions) {\r\n    this.options = {\r\n      host: options && options.host !== undefined ? options.host : defaultOptions.host,\r\n      port: options && options.port !== undefined  ? options.port : defaultOptions.port,\r\n      https: options && options.https !== undefined  ? options.https : defaultOptions.https,\r\n      timeout: options && options.timeout !== undefined  ? options.timeout : defaultOptions.timeout,\r\n      username: options && options.username !== undefined  ? options.username : defaultOptions.username,\r\n      password: options && options.password !== undefined  ? options.password : defaultOptions.password\r\n    };\r\n    this.responseHandler = new ResponseHandler();\r\n    this.userAgent = UserAgentBuilder.Build();\r\n  }\r\n\r\n  request(method: string, path: string, query: Object, data: string, expectedStatus: number, callback: (err: any, responseData?: string) => void) {\r\n    let isPost = /(POST|PUT)/.test(method);\r\n    let headers = {\r\n      'Accept': 'application/xml',\r\n      'User-Agent': this.userAgent\r\n    };\r\n    let options = {\r\n      host: this.options.host,\r\n      port: this.options.port,\r\n      path: path + (query ? '?' + querystring.stringify(query) : ''),\r\n      method: method,\r\n      headers: headers,\r\n      auth: this.options.username + ':' + this.options.password\r\n    };\r\n    \r\n    var dataBuf: Buffer;\r\n  \r\n    if (isPost) {\r\n      dataBuf = data ? new Buffer(data, 'utf8') : null;\r\n      headers['Content-Type'] = 'application/xml';\r\n      headers['Content-Length'] = data ? dataBuf.length : 0;\r\n    }\r\n  \r\n    var proto = this.options.https ? https : http;\r\n    var req = proto.request(options, (res) => {\r\n      this.responseHandler.handle(res, expectedStatus, callback);\r\n    });\r\n  \r\n    req.on('socket', (socket) => {\r\n      socket._req = req;\r\n      if (this.options.timeout) {\r\n        socket.setTimeout(this.options.timeout);\r\n        if (socket.listeners('timeout').length === 0) {\r\n          socket.on('timeout', onSocketTimeout);\r\n        }\r\n      }\r\n    });\r\n  \r\n    req.on('error', function (err) {\r\n      callback(err);\r\n    });\r\n  \r\n    if (isPost && data) req.write(dataBuf);\r\n    req.end();\r\n  }\r\n}\r\n\r\n"],"sourceRoot":"../../src"}