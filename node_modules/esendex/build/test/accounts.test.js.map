{"version":3,"sources":["test/accounts.test.ts"],"names":[],"mappings":"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","file":"test/accounts.test.js","sourcesContent":["import {Client} from '../lib/client'\r\nimport * as assert from 'assert'\r\nimport sinon = require('sinon')\r\nimport _proxyquire = require('proxyquire')\r\nlet proxyquire = _proxyquire.noCallThru()\r\n\r\ndescribe('Accounts', function () {\r\n\r\n  describe('get all', function () {\r\n\r\n    var responseXml;\r\n    var requestStub;\r\n    var options;\r\n    var callbackSpy;\r\n    var responseObject;\r\n    var parseStringStub: Sinon.SinonStub;\r\n    var xmlParserStub: Sinon.SinonStub;\r\n\r\n    before(function () {\r\n      responseXml = 'not actually xml here';\r\n      requestStub = sinon.stub().callsArgWith(5, null, responseXml);\r\n      let client = { requesthandler: { request: requestStub } };\r\n      options = { dog: 'cat' };\r\n      callbackSpy = sinon.spy();\r\n      responseObject = { accounts: { account: ['accounts'] } };\r\n      \r\n      parseStringStub = sinon.stub().callsArgWith(1, null, responseObject)\r\n      xmlParserStub = sinon.stub().returns({ parseString: parseStringStub });\r\n\r\n      let Accounts = proxyquire('../lib/accounts', {\r\n        './xmlparser': { XmlParser: xmlParserStub }\r\n      }).Accounts;\r\n      let accounts = new Accounts(client);\r\n      accounts.get(options, callbackSpy);\r\n    });\r\n\r\n    it('should create an instance of the XmlParser', function () {\r\n      sinon.assert.calledWithNew(xmlParserStub);\r\n    });\r\n\r\n    it('should call the accounts endpoint', function () {\r\n      sinon.assert.calledWith(requestStub, 'GET', '/v1.0/accounts', options, null, 200, sinon.match.func);\r\n    });\r\n\r\n    it('should parse the xml response', function () {\r\n      sinon.assert.calledWith(parseStringStub, responseXml, sinon.match.func);\r\n    });\r\n\r\n    it('should call the callback with the parsed accounts response', function () {\r\n      sinon.assert.calledWith(callbackSpy, null, responseObject.accounts);\r\n    });\r\n\r\n  });\r\n\r\n  describe('get all with one account returned', function () {\r\n\r\n    var expectedAccount;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      let client = {\r\n        requesthandler: {\r\n          request: sinon.stub().callsArgWith(5, null, 'not actually xml here')\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n      expectedAccount = 'not an array';\r\n      let responseObject = { accounts: { account: expectedAccount } };\r\n      \r\n      let parseStringStub = sinon.stub().callsArgWith(1, null, responseObject)\r\n      let xmlParserStub = sinon.stub().returns({ parseString: parseStringStub });\r\n\r\n      let Accounts = proxyquire('../lib/accounts', {\r\n        './xmlparser': { XmlParser: xmlParserStub }\r\n      }).Accounts;\r\n      let accounts = new Accounts(client);\r\n      accounts.get({}, callbackSpy);\r\n    });\r\n\r\n    it('should return an array of a single account', function () {\r\n      sinon.assert.calledWith(callbackSpy, null, { account: [expectedAccount] });\r\n    });\r\n\r\n  });\r\n\r\n  describe('get specific account', function () {\r\n\r\n    var responseXml;\r\n    var requestStub;\r\n    var expectedPath;\r\n    var callbackSpy;\r\n    var expectedAccount;\r\n    var parseStringStub: Sinon.SinonStub;\r\n\r\n    before(function () {\r\n      responseXml = 'not actually xml here';\r\n      requestStub = sinon.stub().callsArgWith(5, null, responseXml);\r\n      let client = {\r\n        requesthandler: {\r\n          request: requestStub\r\n        }\r\n      };\r\n      let options = { id: '1fecafcf-0c33-481c-bec8-7ca272ba71c3', crab: 'lobster' };\r\n      expectedPath = '/v1.0/accounts/' + options.id;\r\n      callbackSpy = sinon.spy();\r\n      expectedAccount = { id: 'value' };\r\n      let responseObject = { account: expectedAccount };\r\n      \r\n      parseStringStub = sinon.stub().callsArgWith(1, null, responseObject)\r\n      let xmlParserStub = sinon.stub().returns({ parseString: parseStringStub });\r\n\r\n      let Accounts = proxyquire('../lib/accounts', {\r\n        './xmlparser': { XmlParser: xmlParserStub }\r\n      }).Accounts;\r\n      let accounts = new Accounts(client);\r\n      accounts.get(options, callbackSpy);\r\n    });\r\n\r\n    it('should call the accounts endpoint with the specific message id', function () {\r\n      sinon.assert.calledWith(requestStub, 'GET', expectedPath, sinon.match({ id: undefined }), null, 200, sinon.match.func);\r\n    });\r\n\r\n    it('should parse the xml response', function () {\r\n      sinon.assert.calledWith(parseStringStub, responseXml, sinon.match.func);\r\n    });\r\n\r\n    it('should call the callback with the parsed account response', function () {\r\n      sinon.assert.calledWith(callbackSpy, null, expectedAccount);\r\n    });\r\n\r\n  });\r\n\r\n  describe('get when request error', function () {\r\n\r\n    var requestError;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      requestError = new Error('some request error');\r\n      let client = {\r\n        requesthandler: {\r\n          request: sinon.stub().callsArgWith(5, requestError)\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n      \r\n      let Accounts = proxyquire('../lib/accounts', {\r\n        './xmlparser': { XmlParser: sinon.stub() }\r\n      }).Accounts;\r\n      let accounts = new Accounts(client);\r\n      accounts.get(null, callbackSpy);\r\n    });\r\n\r\n    it('should call the callback with the error', function () {\r\n      sinon.assert.calledWith(callbackSpy, requestError);\r\n    });\r\n\r\n  });\r\n\r\n  describe('get when parser error', function () {\r\n\r\n    var parserError;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      parserError = new Error('some parser error');\r\n      let client = {\r\n        requesthandler: {\r\n          request: sinon.stub().callsArgWith(5, null, 'some response data')\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n\r\n      let parseStringStub = sinon.stub().callsArgWith(1, parserError)\r\n      let xmlParserStub = sinon.stub().returns({ parseString: parseStringStub });\r\n\r\n      let Accounts = proxyquire('../lib/accounts', {\r\n        './xmlparser': { XmlParser: xmlParserStub }\r\n      }).Accounts;\r\n      let accounts = new Accounts(client);\r\n      accounts.get(null, callbackSpy);\r\n    });\r\n\r\n    it('should call the callback with the error', function () {\r\n      sinon.assert.calledWith(callbackSpy, parserError);\r\n    });\r\n\r\n  });\r\n\r\n});"],"sourceRoot":"../../src"}