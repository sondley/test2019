{"version":3,"sources":["test/batches.test.ts"],"names":[],"mappings":"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","file":"test/batches.test.js","sourcesContent":["import * as assert from 'assert'\r\nimport sinon = require('sinon')\r\nimport _proxyquire = require('proxyquire')\r\nlet proxyquire = _proxyquire.noCallThru()\r\n\r\ndescribe('Batches', function () {\r\n\r\n  describe('get', function () {\r\n\r\n    var responseXml;\r\n    var requestStub;\r\n    var options;\r\n    var callbackSpy;\r\n    var responseObject;\r\n    var parseStringStub: Sinon.SinonStub;\r\n    var xmlParserStub: Sinon.SinonStub;\r\n\r\n    before(function () {\r\n      responseXml = 'could be anything really';\r\n      requestStub = sinon.stub().callsArgWith(5, null, responseXml);\r\n      let esendexFake = {\r\n        requesthandler: {\r\n          request: requestStub\r\n        }\r\n      };\r\n      options = { plane: 'boat' };\r\n      callbackSpy = sinon.spy();\r\n      responseObject = { messagebatches: 'messagebatches' };\r\n      \r\n      parseStringStub = sinon.stub().callsArgWith(1, null, responseObject)\r\n      xmlParserStub = sinon.stub().returns({ parseString: parseStringStub });\r\n\r\n      let Batches = proxyquire('../lib/batches', {\r\n        './xmlparser': { XmlParser: xmlParserStub }\r\n      }).Batches;\r\n      let batches = new Batches(esendexFake);\r\n      batches.get(options, callbackSpy);\r\n    });\r\n\r\n    it('should create an instance of the XmlParser', function () {\r\n      sinon.assert.calledWithNew(xmlParserStub);\r\n    });\r\n\r\n    it('should call the messagebatches endpoint', function () {\r\n      sinon.assert.calledWith(requestStub, 'GET', '/v1.0/messagebatches', options, null, 200, sinon.match.func);\r\n    });\r\n\r\n    it('should parse the xml response', function () {\r\n      sinon.assert.calledWith(parseStringStub, responseXml, sinon.match.func);\r\n    });\r\n\r\n    it('should call the callback with the parsed messagebatches response', function () {\r\n      sinon.assert.calledWith(callbackSpy, null, responseObject.messagebatches);\r\n    });\r\n\r\n  });\r\n\r\n  describe('get when request error', function () {\r\n\r\n    var requestError;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      requestError = new Error('some request error');\r\n      var esendexFake = {\r\n        requesthandler: {\r\n          request: sinon.stub().callsArgWith(5, requestError)\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n\r\n      let Batches = proxyquire('../lib/batches', {\r\n        './xmlparser': { XmlParser: sinon.stub() }\r\n      }).Batches;\r\n      var batches = new Batches(esendexFake);\r\n      batches.get(null, callbackSpy);\r\n    });\r\n\r\n    it('should call the callback with the error', function () {\r\n      sinon.assert.calledWith(callbackSpy, requestError);\r\n    });\r\n\r\n  });\r\n\r\n  describe('get when parser error', function () {\r\n\r\n    var parserError;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      parserError = new Error('some parser error');\r\n      var esendexFake = {\r\n        requesthandler: {\r\n          request: sinon.stub().callsArgWith(5, null, 'some response data')\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n\r\n      let parseStringStub = sinon.stub().callsArgWith(1, parserError)\r\n      let xmlParserStub = sinon.stub().returns({ parseString: parseStringStub });\r\n\r\n      let Batches = proxyquire('../lib/batches', {\r\n        './xmlparser': { XmlParser: xmlParserStub }\r\n      }).Batches;\r\n      var batches = new Batches(esendexFake);\r\n      batches.get(null, callbackSpy);\r\n    });\r\n\r\n    it('should call the callback with the error', function () {\r\n      sinon.assert.calledWith(callbackSpy, parserError);\r\n    });\r\n\r\n  });\r\n\r\n  describe('cancel', function () {\r\n\r\n    var requestStub;\r\n    var id;\r\n    var expectedPath;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      requestStub = sinon.stub().callsArgWith(5, null, '');\r\n      var esendexFake = {\r\n        requesthandler: {\r\n          request: requestStub\r\n        }\r\n      };\r\n      id = '32c43729-6225-47f7-9359-521406fc29ac';\r\n      expectedPath = '/v1.0/messagebatches/' + id;\r\n      callbackSpy = sinon.spy();\r\n\r\n      var Batches = proxyquire('../lib/batches', {}).Batches;\r\n      var batches = new Batches(esendexFake);\r\n      batches.cancel(id, callbackSpy);\r\n    });\r\n\r\n    it('should call the messagebatches endpoint', function () {\r\n      sinon.assert.calledWith(requestStub, 'DELETE', expectedPath, null, null, 204, sinon.match.func);\r\n    });\r\n\r\n    it('should call the callback with the parsed messagebatches response', function () {\r\n      sinon.assert.calledWith(callbackSpy, null);\r\n    });\r\n\r\n  });\r\n\r\n  describe('cancel when request error', function () {\r\n\r\n    var requestError;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      requestError = new Error('some request error');\r\n      var esendexFake = {\r\n        requesthandler: {\r\n          request: sinon.stub().callsArgWith(5, requestError)\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n\r\n      var Batches = proxyquire('../lib/batches', {}).Batches;\r\n      var batches = new Batches(esendexFake);\r\n      batches.cancel('asdasdda', callbackSpy);\r\n    });\r\n\r\n    it('should call the callback with the error', function () {\r\n      sinon.assert.calledWith(callbackSpy, requestError);\r\n    });\r\n\r\n  });\r\n\r\n  describe('rename', function () {\r\n\r\n    var requestXml;\r\n    var requestStub;\r\n    var options;\r\n    var expectedPath;\r\n    var callbackSpy;\r\n    var buildStub;\r\n    var xmlBuilderStub;\r\n\r\n    before(function () {\r\n      requestXml = 'batch rename body';\r\n      requestStub = sinon.stub().callsArgWith(5, null, '');\r\n      var esendexFake = {\r\n        requesthandler: {\r\n          request: requestStub\r\n        }\r\n      };\r\n      options = { id: '32c43729-6225-47f7-9359-521406fc29ac', name: 'My new batch name!' };\r\n      expectedPath = '/v1.1/messagebatches/' + options.id;\r\n      callbackSpy = sinon.spy();\r\n      \r\n      buildStub = sinon.stub().returns(requestXml)\r\n      xmlBuilderStub = sinon.stub().returns({ build: buildStub });\r\n\r\n      let Batches = proxyquire('../lib/batches', {\r\n        './xmlparser': { XmlParser: function () {} },\r\n        './xmlbuilder': { XmlBuilder: xmlBuilderStub }\r\n      }).Batches;\r\n      var batches = new Batches(esendexFake);\r\n      batches.rename(options, callbackSpy);\r\n    });\r\n\r\n    it('should create an xml builder with the messagebatch root element', function () {\r\n      sinon.assert.calledOnce(xmlBuilderStub);\r\n      sinon.assert.calledWithNew(xmlBuilderStub);\r\n      sinon.assert.calledWith(xmlBuilderStub, 'messagebatch');\r\n    });\r\n\r\n    it('should build the message batch rename request xml', function () {\r\n      sinon.assert.calledWith(buildStub, {\r\n        '$': { xmlns: 'http://api.esendex.com/ns/' },\r\n        name: options.name\r\n      });\r\n    });\r\n\r\n    it('should call the messagebatches endpoint', function () {\r\n      sinon.assert.calledWith(requestStub, 'PUT', expectedPath, null, requestXml, 204, sinon.match.func);\r\n    });\r\n\r\n    it('should call the callback with the parsed messagebatches response', function () {\r\n      sinon.assert.calledWith(callbackSpy, null);\r\n    });\r\n\r\n  });\r\n\r\n  describe('rename when request error', function () {\r\n\r\n    var requestError;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      requestError = new Error('some request error');\r\n      var esendexFake = {\r\n        requesthandler: {\r\n          request: sinon.stub().callsArgWith(5, requestError)\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n      var buildObjectStub = sinon.stub().returns('asdsadasd');\r\n      \r\n      let buildStub = sinon.stub().returns('asdsadasd')\r\n      let xmlBuilderStub = sinon.stub().returns({ build: buildStub });\r\n\r\n      let Batches = proxyquire('../lib/batches', {\r\n        './xmlparser': { XmlParser: function () {} },\r\n        './xmlbuilder': { XmlBuilder: xmlBuilderStub }\r\n      }).Batches;\r\n      var batches = new Batches(esendexFake);\r\n      batches.rename('asdaaggadsgwq', callbackSpy);\r\n    });\r\n\r\n    it('should call the callback with the error', function () {\r\n      sinon.assert.calledWith(callbackSpy, requestError);\r\n    });\r\n\r\n  });\r\n\r\n});"],"sourceRoot":"../../src"}