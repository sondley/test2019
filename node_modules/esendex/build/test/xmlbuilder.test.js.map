{"version":3,"sources":["test/xmlbuilder.test.ts"],"names":[],"mappings":"AAAA,IAAY,MAAM,WAAM,QACxB,CAAC,CAD+B;AAChC,IAAO,KAAK,WAAW,OAAO,CAAC,CAAA;AAC/B,IAAY,WAAW,WAAM,YAC7B,CAAC,CADwC;AAEzC,IAAI,UAAU,GAAG,WAAW,CAAC,UAAU,EAAE,CAAC;AAE1C,QAAQ,CAAC,YAAY,EAAE;IAErB,IAAI,QAAgB,CAAC;IACrB,IAAI,SAAiB,CAAC;IACtB,IAAI,eAAgC,CAAC;IACrC,IAAI,UAA0B,CAAC;IAC/B,IAAI,aAAqB,CAAC;IAC1B,IAAI,MAAc,CAAC;IAEnB,MAAM,CAAC;QACL,QAAQ,GAAG,8BAA8B,CAAC;QAC1C,SAAS,GAAG,uBAAuB,CAAA;QAEnC,eAAe,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAClD,IAAI,MAAM,GAAG,EAAE,OAAO,EAAE,cAAc,IAAI,CAAC,WAAW,GAAG,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC;QAC9E,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAG1C,aAAa,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;QAEnC,IAAI,OAAO,GAAG,UAAU,CAAC,mBAAmB,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,UAAU,CAAC;QAC/E,IAAI,OAAO,GAAe,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE;QACtD,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QACpC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACvC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC;YAC9C,QAAQ,EAAE,QAAQ;YAClB,MAAM,EAAE;gBACN,UAAU,EAAE,IAAI;gBAChB,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,OAAO;aAClB;YACD,mBAAmB,EAAE,IAAI;SAC1B,CAAC,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE;QACnC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE;QACvC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"test/xmlbuilder.test.js","sourcesContent":["import * as assert from 'assert'\r\nimport sinon = require('sinon')\r\nimport * as _proxyquire from 'proxyquire'\r\nimport {XmlBuilder} from '../lib/xmlbuilder'\r\nlet proxyquire = _proxyquire.noCallThru();\r\n\r\ndescribe('XmlBuilder', function () {\r\n\r\n  var rootName: string;\r\n  var xmlString: string;\r\n  var buildObjectStub: Sinon.SinonStub;\r\n  var builderSpy: Sinon.SinonSpy;\r\n  var objectToBuild: Object;\r\n  var result: string;\r\n\r\n  before(function () {\r\n    rootName = 'this is the root object name';\r\n    xmlString = 'I am totally some XML'\r\n    \r\n    buildObjectStub = sinon.stub().returns(xmlString);\r\n    let xml2js = { Builder: function () { this.buildObject = buildObjectStub; } };\r\n    builderSpy = sinon.spy(xml2js, 'Builder');\r\n    \r\n    \r\n    objectToBuild = { Some: 'object' };\r\n    \r\n    let Builder = proxyquire('../lib/xmlbuilder', { 'xml2js': xml2js }).XmlBuilder;\r\n    let builder: XmlBuilder = new Builder(rootName);\r\n    result = builder.build(objectToBuild);\r\n  });\r\n\r\n  it('should create a builder with the expected options', function () {\r\n    sinon.assert.calledOnce(builderSpy);\r\n    sinon.assert.calledWithNew(builderSpy);\r\n    sinon.assert.calledWith(builderSpy, sinon.match({ \r\n      rootName: rootName,\r\n      xmldec: {\r\n        standalone: null,\r\n        version: '1.0',\r\n        encoding: 'UTF-8'\r\n      },\r\n      allowSurrogateChars: true\r\n    }));\r\n  });\r\n  \r\n  it('should build the object to xml', function () {\r\n    sinon.assert.calledWith(buildObjectStub, objectToBuild);\r\n  });\r\n  \r\n  it('should return the built xml string', function () {\r\n    assert.strictEqual(result, xmlString);\r\n  });\r\n\r\n});"],"sourceRoot":"../../src"}