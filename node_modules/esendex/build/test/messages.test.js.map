{"version":3,"sources":["test/messages.test.ts"],"names":[],"mappings":"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","file":"test/messages.test.js","sourcesContent":["import assert = require('assert')\r\nimport sinon = require('sinon')\r\nimport _proxyquire = require('proxyquire')\r\nimport {Messages} from '../lib/messages'\r\nlet proxyquire = _proxyquire.noCallThru()\r\n\r\ndescribe('Messages', function () {\r\n\r\n  describe('get all', function () {\r\n\r\n    var responseXml;\r\n    var requestStub;\r\n    var options;\r\n    var callbackSpy;\r\n    var responseObject;\r\n    var parseStringStub;\r\n    var xmlParserStub;\r\n\r\n    before(function () {\r\n      responseXml = 'could be anything really';\r\n      requestStub = sinon.stub().callsArgWith(5, null, responseXml);\r\n      let esendexFake = {\r\n        requesthandler: {\r\n          request: requestStub\r\n        }\r\n      };\r\n      options = { dog: 'cat' };\r\n      callbackSpy = sinon.spy();\r\n      responseObject = { messageheaders: { messageheader: ['messageheaders'] } };\r\n      \r\n      parseStringStub = sinon.stub().callsArgWith(1, null, responseObject)\r\n      xmlParserStub = sinon.stub().returns({ parseString: parseStringStub });\r\n\r\n      let module = proxyquire('../lib/messages', {\r\n        './xmlparser': { XmlParser: xmlParserStub }\r\n      });\r\n      let messages: Messages = new module.Messages(esendexFake);\r\n      messages.get(options, callbackSpy);\r\n    });\r\n\r\n    it('should create an instance of the XmlParser', function () {\r\n      sinon.assert.calledOnce(xmlParserStub);\r\n      sinon.assert.calledWithNew(xmlParserStub);\r\n    });\r\n\r\n    it('should call the messageheaders endpoint', function () {\r\n      sinon.assert.calledWith(requestStub, 'GET', '/v1.0/messageheaders', options, null, 200, sinon.match.func);\r\n    });\r\n\r\n    it('should parse the xml response', function () {\r\n      sinon.assert.calledWith(parseStringStub, responseXml, sinon.match.func);\r\n    });\r\n\r\n    it('should call the callback with the parsed messageheaders response', function () {\r\n      sinon.assert.calledWith(callbackSpy, null, responseObject.messageheaders);\r\n    });\r\n\r\n  });\r\n\r\n  describe('get all with one message returned', function () {\r\n\r\n    var expectedMessageHeader;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      let responseXml = 'jargon';\r\n      let requestStub = sinon.stub().callsArgWith(5, null, responseXml);\r\n      let esendexFake = {\r\n        requesthandler: {\r\n          request: requestStub\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n      expectedMessageHeader = 'not an array';\r\n      let responseObject = { messageheaders: { messageheader: expectedMessageHeader } };\r\n      \r\n      let parseStringStub = sinon.stub().callsArgWith(1, null, responseObject)\r\n      let xmlParserStub = sinon.stub().returns({ parseString: parseStringStub });\r\n\r\n      let module = proxyquire('../lib/messages', {\r\n        './xmlparser': { XmlParser: xmlParserStub }\r\n      });\r\n      let messages: Messages = new module.Messages(esendexFake);\r\n      messages.get({}, callbackSpy);\r\n    });\r\n\r\n    it('should return an array of a single message header', function () {\r\n      sinon.assert.calledWith(callbackSpy, null, { messageheader: [expectedMessageHeader] });\r\n    });\r\n\r\n  });\r\n\r\n  describe('get specific message', function () {\r\n\r\n    var requestStub;\r\n    var expectedPath;\r\n    var callbackSpy;\r\n    var expectedMessageHeader;\r\n\r\n    before(function () {\r\n      let responseXml = 'could be anything really';\r\n      requestStub = sinon.stub().callsArgWith(5, null, responseXml);\r\n      let esendexFake = {\r\n        requesthandler: {\r\n          request: requestStub\r\n        }\r\n      };\r\n      let options = { id: '6aa73324-1ac6-4f6f-b5df-9dec5bdd5d64', piano: 'violin' };\r\n      expectedPath = '/v1.0/messageheaders/' + options.id;\r\n      callbackSpy = sinon.spy();\r\n      expectedMessageHeader = 'messageheader';\r\n      let responseObject = { messageheader: expectedMessageHeader };\r\n      \r\n      let parseStringStub = sinon.stub().callsArgWith(1, null, responseObject)\r\n      let xmlParserStub = sinon.stub().returns({ parseString: parseStringStub });\r\n\r\n      let module = proxyquire('../lib/messages', {\r\n        './xmlparser': { XmlParser: xmlParserStub }\r\n      });\r\n      let messages: Messages = new module.Messages(esendexFake);\r\n      messages.get(options, callbackSpy);\r\n    });\r\n\r\n    it('should call the messageheaders endpoint with the specific message id', function () {\r\n      sinon.assert.calledWith(requestStub, 'GET', expectedPath, sinon.match({ id: undefined }), null, 200, sinon.match.func);\r\n    });\r\n\r\n    it('should call the callback with the parsed messageheader response', function () {\r\n      sinon.assert.calledWith(callbackSpy, null, expectedMessageHeader);\r\n    });\r\n\r\n  });\r\n\r\n  describe('get when request error', function () {\r\n\r\n    var requestError;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      requestError = new Error('some request error');\r\n      let esendexFake = {\r\n        requesthandler: {\r\n          request: sinon.stub().callsArgWith(5, requestError)\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n\r\n      let module = proxyquire('../lib/messages', {\r\n        './xmlparser': { XmlParser: sinon.stub() }\r\n      });\r\n      let messages: Messages = new module.Messages(esendexFake);\r\n      messages.get(null, callbackSpy);\r\n    });\r\n\r\n    it('should call the callback with the error', function () {\r\n      sinon.assert.calledWith(callbackSpy, requestError);\r\n    });\r\n\r\n  });\r\n\r\n  describe('get when parser error', function () {\r\n\r\n    var parserError;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      parserError = new Error('some parser error');\r\n      let esendexFake = {\r\n        requesthandler: {\r\n          request: sinon.stub().callsArgWith(5, null, 'some response data')\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n\r\n      let parseStringStub = sinon.stub().callsArgWith(1, parserError)\r\n      let xmlParserStub = sinon.stub().returns({ parseString: parseStringStub });\r\n\r\n      let module = proxyquire('../lib/messages', {\r\n        './xmlparser': { XmlParser: xmlParserStub }\r\n      });\r\n      let messages = new module.Messages(esendexFake);\r\n      messages.get(null, callbackSpy);\r\n    });\r\n\r\n    it('should call the callback with the error', function () {\r\n      sinon.assert.calledWith(callbackSpy, parserError);\r\n    });\r\n\r\n  });\r\n\r\n  describe('send returns a single message', function () {\r\n\r\n    var requestXml;\r\n    var responseXml;\r\n    var requestStub;\r\n    var callbackSpy;\r\n    var expectedMessageHeader;\r\n    var messagesToSend;\r\n    var parseStringStub;\r\n    var xmlParserStub;\r\n    var xmlBuilderStub;\r\n\r\n    before(function () {\r\n      requestXml = 'could be anything really';\r\n      responseXml = 'some message headers response';\r\n      requestStub = sinon.stub().callsArgWith(5, null, responseXml);\r\n      let esendexFake = {\r\n        requesthandler: {\r\n          request: requestStub\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n      expectedMessageHeader = 'a single message header';\r\n      let responseObject = { messageheaders: { messageheader: expectedMessageHeader } };\r\n\r\n      parseStringStub = sinon.stub().callsArgWith(1, null, responseObject)\r\n      xmlParserStub = sinon.stub().returns({ parseString: parseStringStub });\r\n\r\n      let buildStub = sinon.stub().returns(requestXml);\r\n      xmlBuilderStub = sinon.stub().returns({ build: buildStub });\r\n\r\n      messagesToSend = { some: 'messages' };\r\n\r\n      let module = proxyquire('../lib/messages', {\r\n        './xmlparser': { XmlParser: xmlParserStub },\r\n        './xmlbuilder': { XmlBuilder: xmlBuilderStub }\r\n      });\r\n      let messages = new module.Messages(esendexFake);\r\n      messages.send(messagesToSend, callbackSpy);\r\n    });\r\n\r\n    it('should create an xml builder with the messages root element', function () {\r\n      sinon.assert.calledOnce(xmlBuilderStub);\r\n      sinon.assert.calledWithNew(xmlBuilderStub);\r\n      sinon.assert.calledWith(xmlBuilderStub, 'messages');\r\n    });\r\n\r\n    it('should call the messagedispatcher endpoint', function () {\r\n      sinon.assert.calledWith(requestStub, 'POST', '/v1.0/messagedispatcher', null, requestXml, 200, sinon.match.func);\r\n    });\r\n\r\n    it('should parse the xml response', function () {\r\n      sinon.assert.calledWith(parseStringStub, responseXml, sinon.match.func);\r\n    });\r\n\r\n    it('should call the callback with the parsed messagedispatcher response', function () {\r\n      sinon.assert.calledWith(callbackSpy, null, { messageheader: [expectedMessageHeader] });\r\n    });\r\n\r\n  });\r\n\r\n  describe('send returns multiple messages', function () {\r\n\r\n    var firstMessageHeader;\r\n    var secondMessageHeader;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      let esendexFake = {\r\n        requesthandler: {\r\n          request: sinon.stub().callsArgWith(5, null, 'some message headers response')\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n      firstMessageHeader = 'firstMessageHeader';\r\n      secondMessageHeader = 'secondMessageHeader';\r\n      let responseObject = { messageheaders: { messageheader: [firstMessageHeader, secondMessageHeader] } };\r\n\r\n      let parseStringStub = sinon.stub().callsArgWith(1, null, responseObject)\r\n      let xmlParserStub = sinon.stub().returns({ parseString: parseStringStub });\r\n\r\n      let buildStub = sinon.stub().returns('could be anything really');\r\n      let xmlBuilderStub = sinon.stub().returns({ build: buildStub });\r\n\r\n      let module = proxyquire('../lib/messages', {\r\n        './xmlparser': { XmlParser: xmlParserStub },\r\n        './xmlbuilder': { XmlBuilder: xmlBuilderStub }\r\n      });\r\n      let messages = new module.Messages(esendexFake);\r\n      messages.send({}, callbackSpy);\r\n    });\r\n\r\n    it('should return all dispatched message header responses', function () {\r\n      sinon.assert.calledWith(callbackSpy, null, { messageheader: [firstMessageHeader, secondMessageHeader] });\r\n    });\r\n\r\n  });\r\n\r\n  describe('send when request error', function () {\r\n\r\n    var requestError;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      requestError = new Error('some request error');\r\n      let esendexFake = {\r\n        requesthandler: {\r\n          request: sinon.stub().callsArgWith(5, requestError)\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n\r\n      let buildStub = sinon.stub().returns('akjshdjsahd');\r\n      let xmlBuilderStub = sinon.stub().returns({ build: buildStub });\r\n\r\n      let module = proxyquire('../lib/messages', {\r\n        './xmlparser': { XmlParser: sinon.stub() },\r\n        './xmlbuilder': { XmlBuilder: xmlBuilderStub }\r\n      });\r\n      let messages = new module.Messages(esendexFake);\r\n      messages.send('asdsadd', callbackSpy);\r\n    });\r\n\r\n    it('should call the callback with the error', function () {\r\n      sinon.assert.calledWith(callbackSpy, requestError);\r\n    });\r\n\r\n  });\r\n\r\n  describe('send when parser error', function () {\r\n\r\n    var parserError;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      parserError = new Error('some parser error');\r\n      let esendexFake = {\r\n        requesthandler: {\r\n          request: sinon.stub().callsArgWith(5, null, 'some response data')\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n\r\n      let parseStringStub = sinon.stub().callsArgWith(1, parserError)\r\n      let xmlParserStub = sinon.stub().returns({ parseString: parseStringStub });\r\n\r\n      let buildStub = sinon.stub().returns('akjshdjsahd');\r\n      let xmlBuilderStub = sinon.stub().returns({ build: buildStub });\r\n\r\n      let module = proxyquire('../lib/messages', {\r\n        './xmlparser': { XmlParser: xmlParserStub },\r\n        './xmlbuilder': { XmlBuilder: xmlBuilderStub }\r\n      });\r\n      let messages = new module.Messages(esendexFake);\r\n      messages.send('dgdfg', callbackSpy);\r\n    });\r\n\r\n    it('should call the callback with the error', function () {\r\n      sinon.assert.calledWith(callbackSpy, parserError);\r\n    });\r\n\r\n  });\r\n\r\n  describe('getBody', function () {\r\n\r\n    var responseXml;\r\n    var requestStub;\r\n    var expectedPath;\r\n    var callbackSpy;\r\n    var expectedMessageBody;\r\n    var parseStringStub;\r\n    var xmlParserStub;\r\n\r\n    before(function () {\r\n      responseXml = 'could be anything really';\r\n      requestStub = sinon.stub().callsArgWith(5, null, responseXml);\r\n      let esendexFake = {\r\n        requesthandler: {\r\n          request: requestStub\r\n        }\r\n      };\r\n      let messageId = 'e0ad7982-2670-4a91-9ab9-12687eaacb96';\r\n      expectedPath = '/v1.0/messageheaders/' + messageId + '/body';\r\n      callbackSpy = sinon.spy();\r\n      expectedMessageBody = 'messagebody';\r\n      let responseObject = { messagebody: expectedMessageBody };\r\n\r\n      parseStringStub = sinon.stub().callsArgWith(1, null, responseObject)\r\n      xmlParserStub = sinon.stub().returns({ parseString: parseStringStub });\r\n\r\n      let module = proxyquire('../lib/messages', {\r\n        './xmlparser': { XmlParser: xmlParserStub }\r\n      });\r\n      let messages = new module.Messages(esendexFake);\r\n      messages.getBody(messageId, callbackSpy);\r\n    });\r\n\r\n    it('should create an xml parser', function () {\r\n      sinon.assert.calledOnce(xmlParserStub);\r\n      sinon.assert.calledWithNew(xmlParserStub);\r\n    });\r\n\r\n    it('should call the messageheader body endpoint', function () {\r\n      sinon.assert.calledWith(requestStub, 'GET', expectedPath, null, null, 200, sinon.match.func);\r\n    });\r\n\r\n    it('should parse the xml response', function () {\r\n      sinon.assert.calledWith(parseStringStub, responseXml, sinon.match.func);\r\n    });\r\n\r\n    it('should call the callback with the parsed messagebody response', function () {\r\n      sinon.assert.calledWith(callbackSpy, null, expectedMessageBody);\r\n    });\r\n\r\n  });\r\n\r\n  describe('getBody when request error', function () {\r\n\r\n    var requestError;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      requestError = new Error('some request error');\r\n      let esendexFake = {\r\n        requesthandler: {\r\n          request: sinon.stub().callsArgWith(5, requestError)\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n\r\n      let module = proxyquire('../lib/messages', {\r\n        './xmlparser': { XmlParser: sinon.stub() }\r\n      });\r\n      let messages = new module.Messages(esendexFake);\r\n      messages.getBody('adasdasd', callbackSpy);\r\n    });\r\n\r\n    it('should call the callback with the error', function () {\r\n      sinon.assert.calledWith(callbackSpy, requestError);\r\n    });\r\n\r\n  });\r\n\r\n  describe('getBody when parser error', function () {\r\n\r\n    var parserError;\r\n    var callbackSpy;\r\n\r\n    before(function () {\r\n      parserError = new Error('some parser error');\r\n      let esendexFake = {\r\n        requesthandler: {\r\n          request: sinon.stub().callsArgWith(5, null, 'some response data')\r\n        }\r\n      };\r\n      callbackSpy = sinon.spy();\r\n\r\n      let parseStringStub = sinon.stub().callsArgWith(1, parserError)\r\n      let xmlParserStub = sinon.stub().returns({ parseString: parseStringStub });\r\n\r\n      let module = proxyquire('../lib/messages', {\r\n        './xmlparser': { XmlParser: xmlParserStub }\r\n      });\r\n      let messages = new module.Messages(esendexFake);\r\n      messages.getBody(null, callbackSpy);\r\n    });\r\n\r\n    it('should call the callback with the error', function () {\r\n      sinon.assert.calledWith(callbackSpy, parserError);\r\n    });\r\n\r\n  });\r\n\r\n});"],"sourceRoot":"../../src"}