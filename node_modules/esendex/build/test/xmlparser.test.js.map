{"version":3,"sources":["test/xmlparser.test.ts"],"names":[],"mappings":"AAAA,IAAO,KAAK,WAAW,OAAO,CAAC,CAAA;AAC/B,IAAY,WAAW,WAAM,YAC7B,CAAC,CADwC;AAEzC,IAAI,UAAU,GAAG,WAAW,CAAC,UAAU,EAAE,CAAC;AAE1C,QAAQ,CAAC,WAAW,EAAE;IAEpB,IAAI,YAAoB,CAAC;IACzB,IAAI,eAAgC,CAAC;IACrC,IAAI,UAAU,CAAC;IACf,IAAI,WAA2B,CAAC;IAChC,IAAI,aAAqB,CAAC;IAE1B,MAAM,CAAC;QACL,YAAY,GAAG,EAAE,CAAC;QAClB,eAAe,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;QACnE,UAAU,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,EAAE,WAAW,EAAE,eAAe,EAAC,CAAC,CAAC;QAEnE,IAAI,MAAM,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;QAEpC,WAAW,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAE1B,aAAa,GAAG,iBAAiB,CAAC;QAElC,IAAI,MAAM,GAAG,UAAU,CAAC,kBAAkB,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,SAAS,CAAC;QAC5E,IAAI,MAAM,GAAc,IAAI,MAAM,EAAE,CAAC;QACrC,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE;QACrD,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,EAAE,EAAE,aAAa,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;IACrF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE;QAC5B,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,eAAe,EAAE,aAAa,EAAE,WAAW,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE;QACpD,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"test/xmlparser.test.js","sourcesContent":["import sinon = require('sinon')\r\nimport * as _proxyquire from 'proxyquire'\r\nimport {XmlParser} from '../lib/xmlparser'\r\nlet proxyquire = _proxyquire.noCallThru();\r\n\r\ndescribe('XmlParser', function () {\r\n\r\n  let parsedObject: Object;\r\n  let parseStringStub: Sinon.SinonStub;\r\n  let parserStub;\r\n  let callbackSpy: Sinon.SinonSpy;\r\n  let stringToParse: string;\r\n\r\n  before(function () {\r\n    parsedObject = {};\r\n    parseStringStub = sinon.stub().callsArgWith(1, null, parsedObject);\r\n    parserStub = sinon.stub().returns({ parseString: parseStringStub});\r\n    \r\n    let xml2js = { Parser: parserStub };\r\n    \r\n    callbackSpy = sinon.spy();\r\n    \r\n    stringToParse = 'string to parse';\r\n    \r\n    let Parser = proxyquire('../lib/xmlparser', { 'xml2js': xml2js }).XmlParser;\r\n    let parser: XmlParser = new Parser();\r\n    parser.parseString(stringToParse, callbackSpy);\r\n  });\r\n\r\n  it('should create a parser with the expected options', function () {\r\n    sinon.assert.calledWithNew(parserStub, { explicitArray: false, mergeAttrs: true });\r\n  });\r\n  \r\n  it('should parse the string', function () {\r\n    sinon.assert.calledWith(parseStringStub, stringToParse, callbackSpy);\r\n  });\r\n  \r\n  it('should call the callback with the parsed object', function () {\r\n    sinon.assert.calledWith(callbackSpy, null, parsedObject);\r\n  });\r\n\r\n});"],"sourceRoot":"../../src"}