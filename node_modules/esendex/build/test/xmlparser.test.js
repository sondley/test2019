var sinon = require('sinon');
var _proxyquire = require('proxyquire');
var proxyquire = _proxyquire.noCallThru();
describe('XmlParser', function () {
    var parsedObject;
    var parseStringStub;
    var parserStub;
    var callbackSpy;
    var stringToParse;
    before(function () {
        parsedObject = {};
        parseStringStub = sinon.stub().callsArgWith(1, null, parsedObject);
        parserStub = sinon.stub().returns({ parseString: parseStringStub });
        var xml2js = { Parser: parserStub };
        callbackSpy = sinon.spy();
        stringToParse = 'string to parse';
        var Parser = proxyquire('../lib/xmlparser', { 'xml2js': xml2js }).XmlParser;
        var parser = new Parser();
        parser.parseString(stringToParse, callbackSpy);
    });
    it('should create a parser with the expected options', function () {
        sinon.assert.calledWithNew(parserStub, { explicitArray: false, mergeAttrs: true });
    });
    it('should parse the string', function () {
        sinon.assert.calledWith(parseStringStub, stringToParse, callbackSpy);
    });
    it('should call the callback with the parsed object', function () {
        sinon.assert.calledWith(callbackSpy, null, parsedObject);
    });
});

//# sourceMappingURL=xmlparser.test.js.map
